#!/usr/bin/env ruby
require "nginxbrew"
require "logger"


usage =<<-EOF
Usage: nginxbrew [-v] [-h] command [<args>]

    -v, --version                    Print the version and exit.
    -h, --help                       Print this help.

Available subcommands:
    install <version>                Install nginx with specified version.
    use <version>                    Switch nginx into specified version.
    list                             Show list of installed nginx versions.
    nginxes                          Show list of available nginx versions.
    openresties                      Show list of available openresty versions.
    getconf <path/to/config>         Output new configfile for nginxbrew into specified path.

Optional environments:
    NGINXBREW_HOME                   Path to nginxbrew (will be) installed, ~/nginxbrew is default.
    NGINXBREW_DEBUG                  if 1, use DEBUG level for logging.
    NGINXBREW_CONFIG                 /path/to/configfile written in ruby DSL for build nginx.
EOF


if ARGV.include?("-h") || ARGV.include?("--help") || ARGV.size == 0
    puts usage
    exit 0
end

if ARGV.include?("-v") || ARGV.include?("--version")
    require "nginxbrew/version"
    puts "nginxbrew #{Nginxbrew::VERSION}"
    exit 0
end


ENV["HOME"] ||= File.dirname(__FILE__) # recover $HOME if empty


$debug = ENV["NGINXBREW_DEBUG"].to_i == 1

$logger = Logger.new(STDOUT)
$logger.level = $debug ? Logger::DEBUG : Logger::ERROR


begin
    command = ARGV.shift
    case command
        when "install", "use"
            version = ARGV.shift
            raise Exception.new("version is required!") unless version
            Nginxbrew.run(:"#{command}", envs={ "VERSION" => version })
        when "list"
            Nginxbrew.run(:list)
        when "nginxes"
            Nginxbrew.run(:nginxes, envs={ "HEAD_VERSION" => ARGV.shift })
        when "openresties"
            Nginxbrew.run(:openresties, envs={ "HEAD_VERSION" => ARGV.shift })
        when "getconf"
            output_to = ARGV.shift
            raise Exception.new("output directory/file for config is required!") unless output_to
            Nginxbrew.run(:getconf, envs={ "GETCONF_OUTPUT_TO" => output_to })
        else
            raise Exception.new("Unknown command '#{command}'")
    end
rescue SystemExit => e # from rake.abort
    $stderr.puts e.backtrace if $debug
    exit 255
rescue Exception => e
    $stderr.puts e.backtrace if $debug
    $stderr.puts "ERROR: #{e.message}"
    exit 255
end

